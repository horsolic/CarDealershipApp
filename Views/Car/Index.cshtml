@using System.Globalization
@model CarDealershipApp.Models.CarModel

@{
    ViewData["Title"] = "Index";
}

<h1>Car Dealership Car List</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <!-- Your table headers... -->
    </thead>
    <tbody>
        @foreach (var item in Model.CarList)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Make)</td>
                <td>@Html.DisplayFor(modelItem => item.Model)</td>
                <td>@Html.DisplayFor(modelItem => item.CarModelYear)</td>
                <td>@string.Format(new CultureInfo("en-US"), "{0:C}", item.Price)</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination links -->
<table class="table table-responsive">
    <tr>
        @for (int i = 1; i <= Model.PageCount; i++)
        {
            <td>
                @if (i != Model.CurrentPageIndex)
                {
                    <a href="@Url.Action("Index", new { currentPageIndex = i })">@i</a>
                }
                else
                {
                    <span>@i</span>
                }
            </td>
        }
    </tr>
</table>
<input type="hidden" id="hfCurrentPageIndex" name="currentPageIndex" value="@Model.CurrentPageIndex" />
